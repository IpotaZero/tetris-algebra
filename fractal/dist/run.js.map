{"version":3,"file":"run.js","sources":["../src/Connector.ts","../src/Tree.ts","../src/run.ts"],"sourcesContent":["type Anchor = \"center\" | \"top\" | \"bottom\" | \"left\" | \"right\"\r\n\r\ninterface ConnectorOptions {\r\n    color: string\r\n    width: number\r\n    anchorA: Anchor\r\n    anchorB: Anchor\r\n    arrow: boolean\r\n}\r\n\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport class Connector {\r\n    static #defaultOption: ConnectorOptions = {\r\n        color: \"black\",\r\n        width: 4,\r\n        anchorA: \"center\",\r\n        anchorB: \"center\",\r\n        arrow: false,\r\n    } as const\r\n\r\n    static #layer: SVGSVGElement | null = null\r\n\r\n    static #createLayer(): SVGSVGElement {\r\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\r\n        svg.id = \"connector-layer\"\r\n        Object.assign(svg.style, {\r\n            position: \"fixed\",\r\n            inset: \"0\",\r\n            width: \"100vw\",\r\n            height: \"100vh\",\r\n            pointerEvents: \"none\",\r\n        })\r\n\r\n        // Arrow marker (smaller, centered)\r\n        const marker = this.#createMarker(svg)\r\n\r\n        const defs = document.createElementNS(svg.namespaceURI, \"defs\")\r\n        defs.appendChild(marker)\r\n\r\n        svg.appendChild(defs)\r\n\r\n        return svg\r\n    }\r\n\r\n    static #createMarker(svg: SVGSVGElement) {\r\n        const marker = document.createElementNS(svg.namespaceURI, \"marker\")\r\n\r\n        marker.id = \"arrow-end\"\r\n        marker.setAttribute(\"orient\", \"auto\")\r\n        marker.setAttribute(\"markerWidth\", \"4\")\r\n        marker.setAttribute(\"markerHeight\", \"4\")\r\n        marker.setAttribute(\"refX\", \"1\")\r\n        marker.setAttribute(\"refY\", \"2\")\r\n\r\n        const path = document.createElementNS(svg.namespaceURI, \"path\")\r\n        path.setAttribute(\r\n            \"d\",\r\n            `M 0 0\r\n             Q 2 1.3, 4 2\r\n             Q 2 2.7, 0 4\r\n             Z`,\r\n        )\r\n        path.setAttribute(\"fill\", \"currentColor\")\r\n        marker.appendChild(path)\r\n\r\n        return marker\r\n    }\r\n\r\n    static ensureLayer(): SVGSVGElement {\r\n        if (!this.#layer) {\r\n            this.#layer = this.#createLayer()\r\n        }\r\n        return this.#layer\r\n    }\r\n\r\n    readonly line: SVGPolylineElement\r\n    readonly hitLine: SVGLineElement\r\n    readonly options: Required<ConnectorOptions>\r\n\r\n    readonly #A: HTMLElement\r\n    readonly #B: HTMLElement\r\n    #resizeObserverA!: ResizeObserver\r\n    #resizeObserverB!: ResizeObserver\r\n    #requestAnimationId: number | null = null\r\n\r\n    constructor(a: HTMLElement, b: HTMLElement, options: Partial<ConnectorOptions> = {}) {\r\n        this.#A = a\r\n        this.#B = b\r\n\r\n        this.options = {\r\n            ...Connector.#defaultOption,\r\n            ...options,\r\n        }\r\n\r\n        const svgLayer = Connector.ensureLayer()\r\n        // 透明な当たり判定用line\r\n        this.hitLine = this.#createHitLine(svgLayer)\r\n        svgLayer.appendChild(this.hitLine)\r\n        // 表示用line\r\n        this.line = this.#createLine(svgLayer)\r\n        svgLayer.appendChild(this.line)\r\n\r\n        this.#setupObserver()\r\n\r\n        this.update()\r\n    }\r\n\r\n    #createLine(svgLayer: SVGSVGElement) {\r\n        const line = document.createElementNS(svgLayer.namespaceURI, \"polyline\") as SVGPolylineElement\r\n\r\n        line.setAttribute(\"stroke\", \"currentColor\")\r\n        line.setAttribute(\"stroke-width\", String(this.options.width))\r\n        line.setAttribute(\"stroke-linecap\", \"round\") // 丸い端点にする\r\n\r\n        if (this.options.arrow) {\r\n            line.setAttribute(\"marker-mid\", \"url(#arrow-end)\")\r\n        }\r\n\r\n        // pointer-eventsはnoneにして、当たり判定はhitLineに任せる\r\n        line.style.pointerEvents = \"none\"\r\n\r\n        return line\r\n    }\r\n\r\n    #createHitLine(svgLayer: SVGSVGElement) {\r\n        const hitLine = document.createElementNS(svgLayer.namespaceURI, \"line\") as SVGLineElement\r\n        hitLine.setAttribute(\"stroke\", \"transparent\")\r\n        hitLine.setAttribute(\"stroke-width\", String(this.options.width * 8))\r\n        hitLine.setAttribute(\"stroke-linecap\", \"round\")\r\n        // pointer-events有効化\r\n        hitLine.style.pointerEvents = \"stroke\"\r\n        // z-indexはSVG内で後ろに来るように先にappendChildする\r\n        return hitLine\r\n    }\r\n\r\n    #setupObserver() {\r\n        const update = this.update.bind(this)\r\n\r\n        window.addEventListener(\"scroll\", update, { passive: true })\r\n        window.addEventListener(\"resize\", update, { passive: true })\r\n\r\n        this.#resizeObserverA = new ResizeObserver(update)\r\n        this.#resizeObserverB = new ResizeObserver(update)\r\n        this.#resizeObserverA.observe(this.#A)\r\n        this.#resizeObserverB.observe(this.#B)\r\n    }\r\n\r\n    #getPoint(el: HTMLElement, anchor: Anchor): Point {\r\n        // 画面上の位置\r\n        const r = el.getBoundingClientRect()\r\n\r\n        switch (anchor) {\r\n            case \"center\":\r\n                return { x: r.left + r.width / 2, y: r.top + r.height / 2 }\r\n            case \"top\":\r\n                return { x: r.left + r.width / 2, y: r.top }\r\n            case \"bottom\":\r\n                return { x: r.left + r.width / 2, y: r.bottom }\r\n            case \"left\":\r\n                return { x: r.left, y: r.top + r.height / 2 }\r\n            case \"right\":\r\n                return { x: r.right, y: r.top + r.height / 2 }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this.#requestAnimationId !== null) return\r\n\r\n        this.#requestAnimationId = requestAnimationFrame(() => {\r\n            const p1 = this.#getPoint(this.#A, this.options.anchorA)\r\n            const p2 = this.#getPoint(this.#B, this.options.anchorB)\r\n\r\n            this.line.setAttribute(\r\n                \"points\",\r\n                `${p1.x},${p1.y} ${(p1.x + p2.x) / 2},${(p1.y + p2.y) / 2} ${p2.x},${p2.y}`,\r\n            )\r\n\r\n            this.hitLine.setAttribute(\"x1\", String(p1.x))\r\n            this.hitLine.setAttribute(\"y1\", String(p1.y))\r\n            this.hitLine.setAttribute(\"x2\", String(p2.x))\r\n            this.hitLine.setAttribute(\"y2\", String(p2.y))\r\n            this.#requestAnimationId = null\r\n        })\r\n    }\r\n\r\n    destroy() {\r\n        window.removeEventListener(\"scroll\", this.update)\r\n        window.removeEventListener(\"resize\", this.update)\r\n        this.#resizeObserverA.disconnect()\r\n        this.#resizeObserverB.disconnect()\r\n        this.line.remove()\r\n        this.hitLine.remove()\r\n    }\r\n}\r\n","import { Connector } from \"./Connector\"\r\n\r\ntype tree = [] | [tree] | [tree, tree]\r\n\r\nexport class Tree {\r\n    tree: tree = []\r\n\r\n    history: string[] = []\r\n    #historyIndex = 0\r\n\r\n    #drawer: TreeDrawer\r\n\r\n    constructor(container: HTMLElement, info: HTMLElement) {\r\n        this.#drawer = new TreeDrawer(container, info)\r\n    }\r\n\r\n    undo() {\r\n        if (this.#historyIndex === 0) return\r\n        this.#historyIndex--\r\n        this.tree = JSON.parse(this.history[this.#historyIndex])\r\n        this.display(false)\r\n    }\r\n\r\n    redo() {\r\n        if (this.#historyIndex === this.history.length - 1) return\r\n        this.#historyIndex++\r\n        this.tree = JSON.parse(this.history[this.#historyIndex])\r\n        this.display(false)\r\n    }\r\n\r\n    divide() {\r\n        TreeController.divide(this.tree)\r\n        this.display()\r\n    }\r\n\r\n    cut() {\r\n        this.tree = JSON.parse(JSON.stringify(TreeController.cut(this.tree)))\r\n        this.display()\r\n    }\r\n\r\n    display(save = true) {\r\n        if (save) {\r\n            this.#saveHistory()\r\n        }\r\n\r\n        this.#drawer.display(this.tree)\r\n\r\n        this.#drawer.setupLeft(this.tree, this.history)\r\n\r\n        this.#setupVertexEvent()\r\n    }\r\n\r\n    #setupVertexEvent() {\r\n        this.#drawer.vertices.forEach((v) => {\r\n            v.onclick = (e) => {\r\n                if (e.target === v) {\r\n                    this.#add(v.id)\r\n                }\r\n            }\r\n\r\n            v.oncontextmenu = (e) => {\r\n                if (e.target !== v) return\r\n\r\n                e.preventDefault()\r\n\r\n                this.#drawer.contextMenu.style.display = \"flex\"\r\n                this.#drawer.contextMenu.style.left = e.clientX + \"px\"\r\n                this.#drawer.contextMenu.style.top = e.clientY + \"px\"\r\n\r\n                const c = this.#drawer.contextMenu\r\n\r\n                c.querySelector<HTMLElement>(\":nth-child(1)\")!.onclick = () => {\r\n                    this.#add(v.id)\r\n                }\r\n\r\n                c.querySelector<HTMLElement>(\":nth-child(2)\")!.onclick = () => {\r\n                    this.#remove(v.id)\r\n                }\r\n\r\n                c.querySelector<HTMLElement>(\":nth-child(3)\")!.onclick = () => {\r\n                    this.#take(v.id)\r\n                }\r\n\r\n                c.querySelector<HTMLElement>(\":nth-child(4)\")!.onclick = () => {\r\n                    this.#drawer.toggleColor(v.id)\r\n\r\n                    this.display(false)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    #saveHistory() {\r\n        this.history = this.history.slice(0, this.#historyIndex + 1)\r\n        this.history.push(JSON.stringify(this.tree))\r\n        this.#historyIndex = this.history.length - 1\r\n    }\r\n\r\n    #add(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        if (t.length == 2) {\r\n            t.splice(0, 2)\r\n            this.display()\r\n            return\r\n        }\r\n\r\n        t.push([] as never)\r\n\r\n        this.display()\r\n    }\r\n\r\n    #remove(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id.slice(0, -1)) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        t.splice(+id.charAt(-1), 1)\r\n\r\n        this.display()\r\n    }\r\n\r\n    #take(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        this.tree = t\r\n\r\n        this.display()\r\n    }\r\n\r\n    isFractal() {\r\n        return TreeController.isSemiFractal(this.tree) && this.invariantToCut()\r\n    }\r\n\r\n    invariantToCut() {\r\n        return JSON.stringify(this.tree) === JSON.stringify(TreeController.cut(this.tree))\r\n    }\r\n}\r\n\r\nclass TreeDrawer {\r\n    top = 100\r\n    vertices: Map<string, HTMLElement> = new Map()\r\n    contextMenu!: HTMLElement\r\n\r\n    #gap = 6\r\n\r\n    #container: HTMLElement\r\n    #info: HTMLElement\r\n    #edges: Map<[HTMLElement, HTMLElement], Connector> = new Map()\r\n\r\n    #selectedVertexColorMap = new Map<string, string>()\r\n    #selectedCount = 0\r\n\r\n    constructor(container: HTMLElement, info: HTMLElement) {\r\n        this.#container = container\r\n        this.#info = info\r\n\r\n        this.#setupContextMenu()\r\n    }\r\n\r\n    toggleColor(id: string) {\r\n        if (this.#selectedVertexColorMap.get(id)) {\r\n            this.#selectedVertexColorMap.delete(id)\r\n        } else {\r\n            this.#selectedVertexColorMap.set(id, `oklch(70% 0.2 ${this.#selectedCount++ * 67})`)\r\n        }\r\n    }\r\n\r\n    display(tree: tree) {\r\n        this.#deleteElements()\r\n\r\n        this.#container.appendChild(Connector.ensureLayer())\r\n\r\n        const root = this.#setRootElement()\r\n\r\n        const r = this.#info.getBoundingClientRect()\r\n\r\n        let id = \"\"\r\n        let t = tree\r\n        while (1) {\r\n            if (t.length === 0) break\r\n            t = t[0]\r\n            id += \"0\"\r\n        }\r\n\r\n        const w = this.#displayGraph(tree, root, \"\", 0)\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            root.style.left = `calc(${r.width * 1.1}px + ${w.left}px)`\r\n        }\r\n    }\r\n\r\n    #setupContextMenu() {\r\n        this.#container.innerHTML = `\r\n            <div id=\"context-menu\">\r\n                <button>追加</button>\r\n                <button>消す</button>\r\n                <button>これ以下を木にする</button>\r\n                <button>この頂点をマークする/外す</button>\r\n            </div>\r\n        `\r\n\r\n        this.contextMenu = this.#container.querySelector(\"#context-menu\")!\r\n        this.contextMenu.style.display = \"none\"\r\n\r\n        document.body.append(this.contextMenu)\r\n\r\n        this.#container.addEventListener(\"pointerdown\", () => {\r\n            this.contextMenu.style.display = \"none\"\r\n        })\r\n    }\r\n\r\n    #displayGraph(\r\n        tree: tree,\r\n        parentElement: HTMLElement,\r\n        id: string,\r\n        direction: 0 | 1 | 2,\r\n    ): { right: number; left: number } {\r\n        if (tree.length === 0) {\r\n            return { right: this.#gap * 2, left: this.#gap * 2 }\r\n        } else if (tree.length === 1) {\r\n            const vertex = this.#setVertexElement(parentElement, id + \"0\", \"blue\")\r\n            return this.#displayGraph(tree[0], vertex, id + \"0\", 0)\r\n        } else if (tree.length === 2) {\r\n            const vertex0 = this.#setVertexElement(parentElement, id + \"0\", \"orange\")\r\n            const width0 = this.#displayGraph(tree[0], vertex0, id + \"0\", 1)\r\n\r\n            const vertex1 = this.#setVertexElement(parentElement, id + \"1\", \"red\")\r\n            const width1 = this.#displayGraph(tree[1], vertex1, id + \"1\", 2)\r\n\r\n            const left = width0.right + this.#gap\r\n            const right = width1.left + this.#gap\r\n\r\n            vertex0.style.left = -left + \"px\"\r\n            vertex1.style.left = right + \"px\"\r\n\r\n            return { left: left + width0.left, right: right + width1.right }\r\n        }\r\n\r\n        throw new SyntaxError(\"ミツマタが発生!\")\r\n    }\r\n\r\n    #setRootElement() {\r\n        const root = this.#createVertexElement(this.top, 0, \"\")\r\n        this.#container.appendChild(root)\r\n\r\n        return root\r\n    }\r\n\r\n    #deleteElements() {\r\n        this.contextMenu.style.display = \"none\"\r\n\r\n        this.#edges.forEach((c) => c.destroy())\r\n        this.#edges.clear()\r\n        this.vertices.clear()\r\n\r\n        this.#container.innerHTML = \"\"\r\n        this.#info.innerHTML = \"\"\r\n    }\r\n\r\n    #setVertexElement(parentElement: HTMLElement, id: string, color: string) {\r\n        const vertex = this.#createVertexElement((this.#gap * 4 * 2) / Math.sqrt(3), 0, id)\r\n\r\n        parentElement.appendChild(vertex)\r\n\r\n        const edge = new Connector(parentElement, vertex)\r\n        edge.line.classList.add(color)\r\n\r\n        this.#edges.set([parentElement, vertex], edge)\r\n\r\n        return vertex\r\n    }\r\n\r\n    #createVertexElement(top: number, left: number, id: string) {\r\n        const vertex = document.createElement(\"span\")\r\n        vertex.classList.add(\"vertex\")\r\n        vertex.style.top = `${top}px`\r\n        vertex.style.left = `${left}px`\r\n        vertex.id = id\r\n\r\n        const color = this.#selectedVertexColorMap.get(vertex.id)\r\n        if (color) vertex.style.backgroundColor = color\r\n\r\n        this.vertices.set(vertex.id, vertex)\r\n\r\n        return vertex\r\n    }\r\n\r\n    folder(tree: tree) {\r\n        this.#folder(tree, this.#info)\r\n    }\r\n\r\n    #folder(tree: tree, parent: HTMLElement, depth = 0, branch = \"\") {\r\n        const button = document.createElement(\"button\")\r\n        button.innerHTML = `${this.stringify(tree, branch)}`\r\n\r\n        const layer = document.createElement(\"div\")\r\n        layer.classList.add(\"hidden\", \"layer\")\r\n        layer.dataset[\"depth\"] = \"2em\"\r\n\r\n        let created = false\r\n\r\n        const dot = () => {\r\n            const p2 = document.createElement(\"span\")\r\n            p2.textContent = \"...\"\r\n            p2.classList.add(\"dot\")\r\n            return p2\r\n        }\r\n\r\n        const create = () => {\r\n            created = true\r\n\r\n            if (tree.length === 1) {\r\n                layer.appendChild(dot())\r\n\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n\r\n                layer.appendChild(dot())\r\n            } else if (tree.length === 2) {\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n\r\n                layer.appendChild(dot())\r\n            }\r\n        }\r\n\r\n        button.onclick = () => {\r\n            if (!created) create()\r\n            layer.classList.toggle(\"hidden\")\r\n        }\r\n\r\n        parent.appendChild(button)\r\n        parent.appendChild(layer)\r\n    }\r\n\r\n    stringify(tree: tree, branch: string = \"\"): string {\r\n        const color = [\"#D6D848\", \"#CC76D1\", \"#4A9DF8\"][branch.length % 3]\r\n\r\n        const c = (t: string) => `<span style=\"color: ${color}\">${t}</span>`\r\n\r\n        if (tree.length === 0) {\r\n            const color = this.#selectedVertexColorMap.get(branch)\r\n            if (color) return `<span style=\"color: ${color};\">0</span>`\r\n\r\n            return \"0\"\r\n        } else if (tree.length === 1) {\r\n            return `${c(\"(\")}${this.stringify(tree[0], branch + 0)}${c(\")\")}`\r\n        } else if (tree.length === 2) {\r\n            return `${c(\"[\")}${this.stringify(tree[0], branch + 0)},${this.stringify(tree[1], branch + 1)}${c(\"]\")}`\r\n        }\r\n\r\n        throw new SyntaxError(\"ミツマタが発生!\")\r\n    }\r\n\r\n    setupLeft(tree: tree, history: string[]) {\r\n        this.#info.innerHTML = \"\"\r\n\r\n        this.#info.innerHTML += this.stringify(tree) + \"<br>\"\r\n        this.#info.innerHTML += JSON.stringify(tree) + \"<br>\"\r\n        this.#info.innerHTML += `階層: ${TreeController.countRank(tree) ?? \"一意でない\"}` + \"<br>\"\r\n        this.#info.innerHTML += `準フラクタル？ ${TreeController.isSemiFractal(tree)}` + \"<br>\"\r\n        this.#info.innerHTML += `C(W)=W？ ${JSON.stringify(TreeController.cut(tree)) === JSON.stringify(tree)}` + \"<br>\"\r\n        this.#info.innerHTML += `<textarea rows=\"5\">${history\r\n            .map((tree) => JSON.stringify(tree).slice(1, -1))\r\n            .join(\"\\n\")}</textarea> <br>`\r\n\r\n        this.folder(tree)\r\n    }\r\n}\r\n\r\nclass TreeController {\r\n    static countRank(tree: tree): number | null {\r\n        if (tree.length === 0) return 0\r\n        else if (tree.length === 1) {\r\n            const rank = this.countRank(tree[0])\r\n\r\n            if (rank === null) return null\r\n\r\n            return rank + 1\r\n        } else if (tree.length === 2) {\r\n            const leftRank = this.countRank(tree[0])\r\n            const rightRank = this.countRank(tree[1])\r\n\r\n            if (leftRank !== rightRank) return null\r\n\r\n            if (leftRank === null) return null\r\n\r\n            return leftRank + 1\r\n        }\r\n\r\n        throw new Error(\"ミツマタが発生!\")\r\n    }\r\n\r\n    static getRankNTrees(tree: tree, n: number): tree[] {\r\n        if (n === 1) {\r\n            if (tree.length === 1) {\r\n                return [tree[0]]\r\n            } else if (tree.length === 2) {\r\n                return [tree[1]]\r\n            }\r\n        }\r\n\r\n        if (tree.length === 0) {\r\n            return []\r\n        } else if (tree.length === 1) {\r\n            return this.getRankNTrees(tree[0], n - 1)\r\n        } else if (tree.length === 2) {\r\n            return [...this.getRankNTrees(tree[0], n - 1), ...this.getRankNTrees(tree[1], n - 1)]\r\n        }\r\n\r\n        throw new Error(\"なんかおかしい!\")\r\n    }\r\n\r\n    static cut(tree: tree): tree {\r\n        if (tree.length === 0) {\r\n            return []\r\n        } else if (tree.length === 1) {\r\n            return [this.cut(tree[0]), tree[0]]\r\n        } else if (tree.length === 2) {\r\n            return [this.cut(tree[1]), tree[1]]\r\n        } else {\r\n            throw new SyntaxError(\"ミツマタが発生!\")\r\n        }\r\n    }\r\n\r\n    static divide(tree: tree) {\r\n        if (tree.length === 1) {\r\n            if (tree[0].length === 0) tree.splice(0, 1)\r\n            else this.divide(tree[0])\r\n        } else if (tree.length === 2) {\r\n            if (tree[1].length === 0) tree.splice(0, 1)\r\n            else this.divide(tree[1])\r\n\r\n            if (tree[0].length === 0) tree.splice(0, 1)\r\n            else this.divide(tree[0])\r\n        }\r\n    }\r\n\r\n    static isSemiFractal(tree: tree) {\r\n        // 同じ階層で、青か赤から来ている木を取得\r\n\r\n        let i = 1\r\n        while (1) {\r\n            const trees = TreeController.getRankNTrees(tree, i)\r\n            if (trees.length === 0) break\r\n\r\n            if (!trees.every((tree) => tree.length === 0) && trees.some((tree) => tree.length === 0)) return false\r\n\r\n            const first = trees[0].join()\r\n\r\n            const 全ての木が等しい = trees.slice(1).every((tree) => tree.join() === first)\r\n\r\n            if (!全ての木が等しい) return false\r\n\r\n            i++\r\n        }\r\n\r\n        return true\r\n    }\r\n}\r\n","import { Tree } from \"./Tree\"\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const container = document.getElementById(\"container\")!\r\n\r\n    const info = document.getElementById(\"info\")!\r\n\r\n    const tree = new Tree(container, info)\r\n    tree.display()\r\n\r\n    const form = document.getElementById(\"form\")!\r\n    const input = document.getElementById(\"input\")! as HTMLInputElement\r\n\r\n    const divide = document.getElementById(\"divide\")!\r\n    divide.onclick = () => {\r\n        tree.divide()\r\n    }\r\n\r\n    const cut = document.getElementById(\"cut\")!\r\n    cut.onclick = () => {\r\n        tree.cut()\r\n    }\r\n\r\n    const copy = document.getElementById(\"copy\")!\r\n    copy.onclick = () => {\r\n        input.value = JSON.stringify(tree.tree)\r\n    }\r\n\r\n    document.getElementById(\"undo\")!.onclick = () => {\r\n        tree.undo()\r\n    }\r\n\r\n    // document.getElementById(\"screen-shot\")!.onclick = async () => {\r\n    //     const url = await captureScreen()\r\n\r\n    //     console.log(url)\r\n    // }\r\n\r\n    window.addEventListener(\"keydown\", (e) => {\r\n        if (e.ctrlKey && e.code === \"KeyZ\") {\r\n            tree.undo()\r\n        }\r\n\r\n        if (e.ctrlKey && e.code === \"KeyY\") {\r\n            tree.redo()\r\n        }\r\n\r\n        if (e.ctrlKey && e.code === \"KeyC\") {\r\n            navigator.clipboard.writeText(JSON.stringify(tree.tree))\r\n        }\r\n    })\r\n\r\n    document.getElementById(\"redo\")!.onclick = () => {\r\n        tree.redo()\r\n    }\r\n    ;(window as any).tree = tree\r\n\r\n    form.onsubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const representation = input.value\r\n            .replaceAll(\"\\n\", \"\")\r\n            .replaceAll(\"0\", \"[]\")\r\n            .replaceAll(\"(\", \"[\")\r\n            .replaceAll(\")\", \"]\")\r\n\r\n        tree.tree = JSON.parse(representation)\r\n        tree.display()\r\n    }\r\n\r\n    // const tree2 = new Tree(container, info)\r\n\r\n    // const stream = await navigator.mediaDevices.getDisplayMedia({\r\n    //     video: true,\r\n    // })\r\n\r\n    // const track = stream.getVideoTracks()[0]\r\n\r\n    // // 型定義にない場合は any にキャスト\r\n    // const imageCapture = new (window as any).ImageCapture(track)\r\n\r\n    // await new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\n    // // トリミングするピクセル数\r\n    // const trimLeft = 0\r\n    // const trimBottom = 800\r\n\r\n    // for (const t of generateRankNTree(5)) {\r\n    //     tree.tree = t\r\n\r\n    //     if (tree.isSemiFractal()) {\r\n    //         tree2.tree = tree.getCut(t)\r\n    //         tree2.top = 40\r\n\r\n    //         container.innerHTML = \"\"\r\n\r\n    //         tree.display()\r\n    //         tree2.display()\r\n\r\n    //         await new Promise((resolve) => requestAnimationFrame(resolve))\r\n    //         await new Promise((resolve) => requestAnimationFrame(resolve))\r\n\r\n    //         // grabFrame も any 扱いにする\r\n    //         const bitmap: ImageBitmap = await imageCapture.grabFrame()\r\n\r\n    //         // 切り抜きサイズを計算\r\n    //         const cropWidth = bitmap.width - trimLeft\r\n    //         const cropHeight = bitmap.height - trimBottom\r\n\r\n    //         const canvas = document.createElement(\"canvas\")\r\n    //         canvas.width = cropWidth\r\n    //         canvas.height = cropHeight\r\n\r\n    //         const ctx = canvas.getContext(\"2d\")\r\n    //         if (!ctx) throw new Error(\"Canvas context not available\")\r\n\r\n    //         // 左と下をトリミング\r\n    //         ctx.drawImage(\r\n    //             bitmap,\r\n    //             trimLeft, // sx: 左から何pxカットするか\r\n    //             0, // sy: 上は切らない\r\n    //             cropWidth, // sw: 幅\r\n    //             cropHeight, // sh: 高さ\r\n    //             0, // dx\r\n    //             0, // dy\r\n    //             cropWidth, // dw\r\n    //             cropHeight, // dh\r\n    //         )\r\n\r\n    //         downloadImage(canvas.toDataURL(\"image/png\"), JSON.stringify(t))\r\n    //     }\r\n    // }\r\n\r\n    // track.stop() // キャプチャ終了\r\n})\r\n\r\n// type tree = [] | [tree] | [tree, tree]\r\n\r\n// const tree = new Tree(document.body, document.body)\r\n\r\n// const semiFractals: Record<string, string> = {}\r\n// const fractals = []\r\n\r\n// for (const t of generateRankNTree(5)) {\r\n//     tree.tree = t\r\n\r\n//     if (tree.isSemiFractal()) semiFractals[JSON.stringify(t)] = JSON.stringify(tree.getCut(t))\r\n//     if (tree.isFractal()) fractals.push(JSON.stringify(t))\r\n// }\r\n\r\n// console.log(JSON.stringify(semiFractals, null, 4))\r\n// console.log(JSON.stringify(fractals))\r\n\r\n// function* generateRankNTree(n: number): Generator<tree> {\r\n//     if (n === 0) {\r\n//         yield []\r\n//         return\r\n//     }\r\n\r\n//     for (const subTree of generateRankNTree(n - 1)) {\r\n//         yield [subTree]\r\n//     }\r\n\r\n//     for (const subTree of generateRankNTree(n - 1)) {\r\n//         for (const subTree2 of generateRankNTree(n - 1)) {\r\n//             yield [subTree, subTree2]\r\n//         }\r\n//     }\r\n// }\r\n\r\n// function downloadImage(url: string, filename: string) {\r\n//     const a = document.createElement(\"a\")\r\n//     a.href = url\r\n//     a.download = filename\r\n//     document.body.appendChild(a)\r\n//     a.click()\r\n//     document.body.removeChild(a)\r\n// }\r\n"],"names":["Connector","#defaultOption","#layer","#createLayer","svg","marker","#createMarker","defs","path","#A","#B","#resizeObserverA","#resizeObserverB","#requestAnimationId","a","b","options","svgLayer","#createHitLine","#createLine","#setupObserver","line","hitLine","update","#getPoint","el","anchor","r","p1","p2","Tree","#historyIndex","#drawer","container","info","TreeDrawer","TreeController","save","#saveHistory","#setupVertexEvent","v","#add","c","#remove","#take","id","t","#gap","#container","#info","#edges","#selectedVertexColorMap","#selectedCount","#setupContextMenu","tree","#deleteElements","root","#setRootElement","w","#displayGraph","i","parentElement","direction","vertex","#setVertexElement","vertex0","width0","vertex1","width1","left","right","#createVertexElement","color","edge","top","#folder","parent","depth","branch","button","layer","created","dot","create","history","rank","leftRank","rightRank","n","trees","first","form","input","divide","cut","copy","e","representation"],"mappings":"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"}