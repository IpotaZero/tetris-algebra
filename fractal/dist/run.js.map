{"version":3,"file":"run.js","sources":["../src/Connector.ts","../src/Tree.ts","../src/run.ts"],"sourcesContent":["type Anchor = \"center\" | \"top\" | \"bottom\" | \"left\" | \"right\"\r\n\r\ninterface ConnectorOptions {\r\n    color: string\r\n    width: number\r\n    anchorA: Anchor\r\n    anchorB: Anchor\r\n    arrow: boolean\r\n}\r\n\r\ninterface Point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport class Connector {\r\n    static #defaultOption: ConnectorOptions = {\r\n        color: \"black\",\r\n        width: 4,\r\n        anchorA: \"center\",\r\n        anchorB: \"center\",\r\n        arrow: false,\r\n    } as const\r\n\r\n    static #layer: SVGSVGElement | null = null\r\n\r\n    static #createLayer(): SVGSVGElement {\r\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\r\n        svg.id = \"connector-layer\"\r\n        Object.assign(svg.style, {\r\n            position: \"fixed\",\r\n            inset: \"0\",\r\n            width: \"100vw\",\r\n            height: \"100vh\",\r\n            pointerEvents: \"none\",\r\n        })\r\n\r\n        // Arrow marker (smaller, centered)\r\n        const marker = this.#createMarker(svg)\r\n\r\n        const defs = document.createElementNS(svg.namespaceURI, \"defs\")\r\n        defs.appendChild(marker)\r\n\r\n        svg.appendChild(defs)\r\n\r\n        return svg\r\n    }\r\n\r\n    static #createMarker(svg: SVGSVGElement) {\r\n        const marker = document.createElementNS(svg.namespaceURI, \"marker\")\r\n\r\n        marker.id = \"arrow-end\"\r\n        marker.setAttribute(\"orient\", \"auto\")\r\n        marker.setAttribute(\"markerWidth\", \"4\")\r\n        marker.setAttribute(\"markerHeight\", \"4\")\r\n        marker.setAttribute(\"refX\", \"1\")\r\n        marker.setAttribute(\"refY\", \"2\")\r\n\r\n        const path = document.createElementNS(svg.namespaceURI, \"path\")\r\n        path.setAttribute(\r\n            \"d\",\r\n            `M 0 0\r\n             Q 2 1.3, 4 2\r\n             Q 2 2.7, 0 4\r\n             Z`,\r\n        )\r\n        path.setAttribute(\"fill\", \"currentColor\")\r\n        marker.appendChild(path)\r\n\r\n        return marker\r\n    }\r\n\r\n    static ensureLayer(): SVGSVGElement {\r\n        if (!this.#layer) {\r\n            this.#layer = this.#createLayer()\r\n        }\r\n        return this.#layer\r\n    }\r\n\r\n    readonly line: SVGPolylineElement\r\n    readonly hitLine: SVGLineElement\r\n    readonly options: Required<ConnectorOptions>\r\n\r\n    readonly #A: HTMLElement\r\n    readonly #B: HTMLElement\r\n    #resizeObserverA!: ResizeObserver\r\n    #resizeObserverB!: ResizeObserver\r\n    #requestAnimationId: number | null = null\r\n\r\n    constructor(a: HTMLElement, b: HTMLElement, options: Partial<ConnectorOptions> = {}) {\r\n        this.#A = a\r\n        this.#B = b\r\n\r\n        this.options = {\r\n            ...Connector.#defaultOption,\r\n            ...options,\r\n        }\r\n\r\n        const svgLayer = Connector.ensureLayer()\r\n        // 透明な当たり判定用line\r\n        this.hitLine = this.#createHitLine(svgLayer)\r\n        svgLayer.appendChild(this.hitLine)\r\n        // 表示用line\r\n        this.line = this.#createLine(svgLayer)\r\n        svgLayer.appendChild(this.line)\r\n\r\n        this.#setupObserver()\r\n\r\n        this.update()\r\n    }\r\n\r\n    #createLine(svgLayer: SVGSVGElement) {\r\n        const line = document.createElementNS(svgLayer.namespaceURI, \"polyline\") as SVGPolylineElement\r\n\r\n        line.setAttribute(\"stroke\", \"currentColor\")\r\n        line.setAttribute(\"stroke-width\", String(this.options.width))\r\n        line.setAttribute(\"stroke-linecap\", \"round\") // 丸い端点にする\r\n\r\n        if (this.options.arrow) {\r\n            line.setAttribute(\"marker-mid\", \"url(#arrow-end)\")\r\n        }\r\n\r\n        // pointer-eventsはnoneにして、当たり判定はhitLineに任せる\r\n        line.style.pointerEvents = \"none\"\r\n\r\n        return line\r\n    }\r\n\r\n    #createHitLine(svgLayer: SVGSVGElement) {\r\n        const hitLine = document.createElementNS(svgLayer.namespaceURI, \"line\") as SVGLineElement\r\n        hitLine.setAttribute(\"stroke\", \"transparent\")\r\n        hitLine.setAttribute(\"stroke-width\", String(this.options.width * 8))\r\n        hitLine.setAttribute(\"stroke-linecap\", \"round\")\r\n        // pointer-events有効化\r\n        hitLine.style.pointerEvents = \"stroke\"\r\n        // z-indexはSVG内で後ろに来るように先にappendChildする\r\n        return hitLine\r\n    }\r\n\r\n    #setupObserver() {\r\n        const update = this.update.bind(this)\r\n\r\n        window.addEventListener(\"scroll\", update, { passive: true })\r\n        window.addEventListener(\"resize\", update, { passive: true })\r\n\r\n        this.#resizeObserverA = new ResizeObserver(update)\r\n        this.#resizeObserverB = new ResizeObserver(update)\r\n        this.#resizeObserverA.observe(this.#A)\r\n        this.#resizeObserverB.observe(this.#B)\r\n    }\r\n\r\n    #getPoint(el: HTMLElement, anchor: Anchor): Point {\r\n        // 画面上の位置\r\n        const r = el.getBoundingClientRect()\r\n\r\n        switch (anchor) {\r\n            case \"center\":\r\n                return { x: r.left + r.width / 2, y: r.top + r.height / 2 }\r\n            case \"top\":\r\n                return { x: r.left + r.width / 2, y: r.top }\r\n            case \"bottom\":\r\n                return { x: r.left + r.width / 2, y: r.bottom }\r\n            case \"left\":\r\n                return { x: r.left, y: r.top + r.height / 2 }\r\n            case \"right\":\r\n                return { x: r.right, y: r.top + r.height / 2 }\r\n        }\r\n    }\r\n\r\n    update() {\r\n        if (this.#requestAnimationId !== null) return\r\n\r\n        this.#requestAnimationId = requestAnimationFrame(() => {\r\n            const p1 = this.#getPoint(this.#A, this.options.anchorA)\r\n            const p2 = this.#getPoint(this.#B, this.options.anchorB)\r\n\r\n            this.line.setAttribute(\r\n                \"points\",\r\n                `${p1.x},${p1.y} ${(p1.x + p2.x) / 2},${(p1.y + p2.y) / 2} ${p2.x},${p2.y}`,\r\n            )\r\n\r\n            this.hitLine.setAttribute(\"x1\", String(p1.x))\r\n            this.hitLine.setAttribute(\"y1\", String(p1.y))\r\n            this.hitLine.setAttribute(\"x2\", String(p2.x))\r\n            this.hitLine.setAttribute(\"y2\", String(p2.y))\r\n            this.#requestAnimationId = null\r\n        })\r\n    }\r\n\r\n    destroy() {\r\n        window.removeEventListener(\"scroll\", this.update)\r\n        window.removeEventListener(\"resize\", this.update)\r\n        this.#resizeObserverA.disconnect()\r\n        this.#resizeObserverB.disconnect()\r\n        this.line.remove()\r\n        this.hitLine.remove()\r\n    }\r\n}\r\n","import { Connector } from \"./Connector\"\r\n\r\ntype tree = [] | [tree] | [tree, tree]\r\n\r\nexport class Tree {\r\n    tree: tree = []\r\n\r\n    #gap = 7\r\n    #container: HTMLElement\r\n    #edges: Map<[HTMLElement, HTMLElement], Connector> = new Map()\r\n\r\n    #vertices: HTMLElement[] = []\r\n\r\n    #contextMenu: HTMLElement\r\n\r\n    #info\r\n\r\n    #selectedLeafIdMap = new Map<string, string>()\r\n    #selectedCount = 0\r\n\r\n    history: string[] = []\r\n    #historyIndex = 0\r\n\r\n    top = 10\r\n\r\n    constructor(container: HTMLElement, info: HTMLElement) {\r\n        this.#container = container\r\n        this.#info = info\r\n\r\n        container.innerHTML = `\r\n            <div id=\"context-menu\">\r\n                <button>追加</button>\r\n                <button>消す</button>\r\n                <button>これ以下を木にする</button>\r\n                <button>この頂点をマークする/外す</button>\r\n            </div>\r\n        `\r\n\r\n        this.#contextMenu = container.querySelector(\"#context-menu\")!\r\n        this.#contextMenu.style.display = \"none\"\r\n\r\n        document.body.append(this.#contextMenu)\r\n\r\n        this.#container.addEventListener(\"pointerdown\", () => {\r\n            this.#contextMenu.style.display = \"none\"\r\n        })\r\n    }\r\n\r\n    undo() {\r\n        if (this.#historyIndex === 0) return\r\n        this.#historyIndex--\r\n        this.tree = JSON.parse(this.history[this.#historyIndex])\r\n        this.display(false)\r\n    }\r\n\r\n    redo() {\r\n        if (this.#historyIndex === this.history.length - 1) return\r\n        this.#historyIndex++\r\n        this.tree = JSON.parse(this.history[this.#historyIndex])\r\n        this.display(false)\r\n    }\r\n\r\n    divide() {\r\n        this.#divide(this.tree)\r\n        this.display()\r\n    }\r\n\r\n    #divide(tree: tree) {\r\n        if (tree.length === 1) {\r\n            if (tree[0].length === 0) tree.splice(0, 1)\r\n            else this.#divide(tree[0])\r\n        } else if (tree.length === 2) {\r\n            if (tree[1].length === 0) tree.splice(0, 1)\r\n            else this.#divide(tree[1])\r\n\r\n            if (tree[0].length === 0) tree.splice(0, 1)\r\n            else this.#divide(tree[0])\r\n        }\r\n    }\r\n\r\n    cut() {\r\n        this.tree = JSON.parse(JSON.stringify(this.getCut(this.tree)))\r\n        this.display()\r\n    }\r\n\r\n    getCut(tree: tree): tree {\r\n        if (tree.length === 0) {\r\n            return []\r\n        } else if (tree.length === 1) {\r\n            return [this.getCut(tree[0]), tree[0]]\r\n        } else if (tree.length === 2) {\r\n            return [this.getCut(tree[1]), tree[1]]\r\n        } else {\r\n            throw new SyntaxError(\"ミツマタが発生!\")\r\n        }\r\n    }\r\n\r\n    display(save = true) {\r\n        if (save) {\r\n            this.history = this.history.slice(0, this.#historyIndex + 1)\r\n\r\n            this.history.push(JSON.stringify(this.tree))\r\n            this.#historyIndex = this.history.length - 1\r\n        }\r\n\r\n        this.#contextMenu.style.display = \"none\"\r\n\r\n        this.#edges.forEach((c) => c.destroy())\r\n        this.#edges.clear()\r\n\r\n        // this.#container.innerHTML = \"\"\r\n        this.#info.innerHTML = \"\"\r\n\r\n        this.#info.innerHTML = this.stringify() + \"<br>\"\r\n        this.#info.innerHTML += JSON.stringify(this.tree) + \"<br>\"\r\n        this.#info.innerHTML += `階層: ${this.#countRank(this.tree) ?? \"一意でない\"}` + \"<br>\"\r\n        this.#info.innerHTML += `準フラクタル？ ${this.isSemiFractal()}` + \"<br>\"\r\n        this.#info.innerHTML +=\r\n            `C(W)=W？ ${JSON.stringify(this.getCut(this.tree)) === JSON.stringify(this.tree)}` + \"<br>\"\r\n\r\n        this.#info.innerHTML += `<textarea rows=\"5\">${this.history\r\n            .map((tree) => JSON.stringify(tree).slice(1, -1))\r\n            .join(\"\\n\")}</textarea> <br>`\r\n\r\n        this.#container.appendChild(Connector.ensureLayer())\r\n\r\n        this.folder()\r\n\r\n        const root = document.createElement(\"span\")\r\n        root.classList.add(\"vertex\")\r\n        root.id = \"\"\r\n        root.style.top = this.top + \"%\"\r\n\r\n        this.#vertices.push(root)\r\n\r\n        this.#container.appendChild(root)\r\n\r\n        const w = this.#displayGraph(this.tree, root)\r\n        root.style.left = `calc(30% + ${w}px)`\r\n\r\n        this.#vertices.forEach((v) => {\r\n            v.onclick = (e) => {\r\n                if (e.target === v) {\r\n                    this.#add(v.id)\r\n                }\r\n            }\r\n\r\n            v.oncontextmenu = (e) => {\r\n                if (e.target === v) {\r\n                    e.preventDefault()\r\n\r\n                    this.#contextMenu.style.display = \"flex\"\r\n                    this.#contextMenu.style.left = e.clientX + \"px\"\r\n                    this.#contextMenu.style.top = e.clientY + \"px\"\r\n\r\n                    this.#contextMenu.querySelector<HTMLElement>(\":nth-child(1)\")!.onclick = () => {\r\n                        this.#add(v.id)\r\n                    }\r\n\r\n                    this.#contextMenu.querySelector<HTMLElement>(\":nth-child(2)\")!.onclick = () => {\r\n                        this.#remove(v.id)\r\n                    }\r\n\r\n                    this.#contextMenu.querySelector<HTMLElement>(\":nth-child(3)\")!.onclick = () => {\r\n                        this.#take(v.id)\r\n                    }\r\n\r\n                    this.#contextMenu.querySelector<HTMLElement>(\":nth-child(4)\")!.onclick = () => {\r\n                        if (this.#selectedLeafIdMap.get(v.id)) {\r\n                            this.#selectedLeafIdMap.delete(v.id)\r\n                        } else {\r\n                            this.#selectedLeafIdMap.set(v.id, `oklch(70% 0.2 ${this.#selectedCount++ * 67})`)\r\n                        }\r\n\r\n                        this.display(false)\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    #add(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        if (t.length == 2) {\r\n            t.splice(0, 2)\r\n            this.display()\r\n            return\r\n        }\r\n\r\n        t.push([] as never)\r\n\r\n        this.display()\r\n    }\r\n\r\n    #remove(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id.slice(0, -1)) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        t.splice(+id.charAt(-1), 1)\r\n\r\n        this.display()\r\n    }\r\n\r\n    #take(id: string) {\r\n        let t = this.tree\r\n\r\n        for (const b of id) {\r\n            t = t[Number(b)]\r\n        }\r\n\r\n        this.tree = t\r\n\r\n        this.display()\r\n    }\r\n\r\n    #displayGraph(tree: any, parentElement: HTMLElement, id = \"\"): number {\r\n        if (tree.length === 0) {\r\n            return 2 * this.#gap\r\n        } else if (tree.length === 1) {\r\n            const vertex = document.createElement(\"span\")\r\n            vertex.classList.add(\"vertex\")\r\n            vertex.style.left = \"0px\"\r\n            vertex.style.top = this.#gap * 4 + \"px\"\r\n            vertex.id = id + \"0\"\r\n\r\n            const color = this.#selectedLeafIdMap.get(vertex.id)\r\n            if (color) vertex.style.backgroundColor = color\r\n\r\n            this.#vertices.push(vertex)\r\n            parentElement.appendChild(vertex)\r\n\r\n            const edge = new Connector(parentElement, vertex)\r\n            edge.line.classList.add(\"blue\")\r\n\r\n            this.#edges.set([parentElement, vertex], edge)\r\n\r\n            return this.#displayGraph(tree[0], vertex, id + \"0\")\r\n        } else if (tree.length === 2) {\r\n            const vertex0 = document.createElement(\"span\")\r\n            vertex0.classList.add(\"vertex\")\r\n            vertex0.style.top = this.#gap * 4 + \"px\"\r\n            vertex0.id = id + \"0\"\r\n\r\n            const color = this.#selectedLeafIdMap.get(vertex0.id)\r\n            if (color) vertex0.style.backgroundColor = color\r\n\r\n            this.#vertices.push(vertex0)\r\n            parentElement.appendChild(vertex0)\r\n\r\n            const edge0 = new Connector(parentElement, vertex0)\r\n            edge0.line.classList.add(\"orange\")\r\n            this.#edges.set([parentElement, vertex0], edge0)\r\n\r\n            const width0 = this.#displayGraph(tree[0], vertex0, id + \"0\")\r\n\r\n            const vertex1 = document.createElement(\"span\")\r\n            vertex1.classList.add(\"vertex\")\r\n            vertex1.style.top = this.#gap * 4 + \"px\"\r\n            vertex1.id = id + \"1\"\r\n\r\n            const color1 = this.#selectedLeafIdMap.get(vertex1.id)\r\n            if (color1) vertex1.style.backgroundColor = color1\r\n\r\n            this.#vertices.push(vertex1)\r\n            parentElement.appendChild(vertex1)\r\n\r\n            const edge1 = new Connector(parentElement, vertex1)\r\n            edge1.line.classList.add(\"red\")\r\n            this.#edges.set([parentElement, vertex1], edge1)\r\n\r\n            const width1 = this.#displayGraph(tree[1], vertex1, id + \"1\")\r\n\r\n            const av = width0 + width1 - this.#gap\r\n\r\n            vertex0.style.left = -av - this.#gap + \"px\"\r\n            vertex1.style.left = av + this.#gap + \"px\"\r\n\r\n            return width0 + width1\r\n        } else {\r\n            throw new SyntaxError(\"ミツマタが発生!\")\r\n        }\r\n    }\r\n\r\n    stringify() {\r\n        return this.#stringify(this.tree, \"\")\r\n    }\r\n\r\n    #stringify(tree: tree, branch: string): string {\r\n        const color = [\"#D6D848\", \"#CC76D1\", \"#4A9DF8\"][branch.length % 3]\r\n\r\n        const c = (t: string) => `<span style=\"color: ${color}\">${t}</span>`\r\n\r\n        if (tree.length === 0) {\r\n            const color = this.#selectedLeafIdMap.get(branch)\r\n            if (color) return `<span style=\"color: ${color};\">0</span>`\r\n\r\n            return \"0\"\r\n        } else if (tree.length === 1) return `${c(\"(\")}${this.#stringify(tree[0], branch + 0)}${c(\")\")}`\r\n        else if (tree.length === 2)\r\n            return `${c(\"[\")}${this.#stringify(tree[0], branch + 0)},${this.#stringify(tree[1], branch + 1)}${c(\"]\")}`\r\n\r\n        throw new SyntaxError(\"ミツマタが発生!\")\r\n    }\r\n\r\n    isFractal() {\r\n        return this.isSemiFractal() && JSON.stringify(this.tree) === JSON.stringify(this.getCut(this.tree))\r\n    }\r\n\r\n    isSemiFractal() {\r\n        // 同じ階層で、青か赤から来ている木を取得\r\n\r\n        let i = 1\r\n        while (1) {\r\n            const trees = this.#getRankNTrees(this.tree, i)\r\n            if (trees.length === 0) break\r\n\r\n            if (!trees.every((tree) => tree.length === 0) && trees.some((tree) => tree.length === 0)) return false\r\n\r\n            const first = trees[0].join()\r\n\r\n            const 全ての木が等しい = trees.slice(1).every((tree) => tree.join() === first)\r\n\r\n            if (!全ての木が等しい) return false\r\n\r\n            i++\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    #countRank(tree: tree): number | null {\r\n        if (tree.length === 0) return 0\r\n        else if (tree.length === 1) {\r\n            const rank = this.#countRank(tree[0])\r\n\r\n            if (rank === null) return null\r\n\r\n            return rank + 1\r\n        } else if (tree.length === 2) {\r\n            const leftRank = this.#countRank(tree[0])\r\n            const rightRank = this.#countRank(tree[1])\r\n\r\n            if (leftRank !== rightRank) return null\r\n\r\n            if (leftRank === null) return null\r\n\r\n            return leftRank + 1\r\n        }\r\n\r\n        throw new Error(\"ミツマタが発生!\")\r\n    }\r\n\r\n    #getRankNTrees(tree: tree, n: number): tree[] {\r\n        if (n === 1) {\r\n            if (tree.length === 1) {\r\n                return [tree[0]]\r\n            } else if (tree.length === 2) {\r\n                return [tree[1]]\r\n            }\r\n        }\r\n\r\n        if (tree.length === 0) {\r\n            return []\r\n        } else if (tree.length === 1) {\r\n            return this.#getRankNTrees(tree[0], n - 1)\r\n        } else if (tree.length === 2) {\r\n            return [...this.#getRankNTrees(tree[0], n - 1), ...this.#getRankNTrees(tree[1], n - 1)]\r\n        }\r\n\r\n        throw new Error(\"なんかおかしい!\")\r\n    }\r\n\r\n    folder() {\r\n        this.#folder(this.tree, this.#info)\r\n    }\r\n\r\n    #folder(tree: tree, parent: HTMLElement, depth = 0, branch = \"\") {\r\n        const button = document.createElement(\"button\")\r\n        button.innerHTML = `${this.#stringify(tree, branch)}`\r\n\r\n        const layer = document.createElement(\"div\")\r\n        layer.classList.add(\"hidden\", \"layer\")\r\n        layer.dataset[\"depth\"] = \"2em\"\r\n\r\n        let created = false\r\n\r\n        const create = () => {\r\n            created = true\r\n\r\n            if (tree.length === 1) {\r\n                const p = document.createElement(\"span\")\r\n                p.textContent = \"...\"\r\n                p.classList.add(\"dot\")\r\n                layer.appendChild(p)\r\n\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n\r\n                const p2 = document.createElement(\"span\")\r\n                p2.textContent = \"...\"\r\n                p2.classList.add(\"dot\")\r\n                layer.appendChild(p2)\r\n            } else if (tree.length === 2) {\r\n                this.#folder(tree[0], layer, depth + 1, branch + 0)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n                this.#folder(tree[1], layer, depth + 1, branch + 1)\r\n\r\n                const p = document.createElement(\"span\")\r\n                p.textContent = \"...\"\r\n                p.classList.add(\"dot\")\r\n                layer.appendChild(p)\r\n            }\r\n        }\r\n\r\n        button.onclick = () => {\r\n            if (!created) create()\r\n            layer.classList.toggle(\"hidden\")\r\n        }\r\n\r\n        parent.appendChild(button)\r\n        parent.appendChild(layer)\r\n    }\r\n}\r\n","import { Tree } from \"./Tree\"\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n    const container = document.getElementById(\"container\")!\r\n\r\n    const info = document.getElementById(\"info\")!\r\n\r\n    const tree = new Tree(container, info)\r\n    tree.display()\r\n\r\n    const form = document.getElementById(\"form\")!\r\n    const input = document.getElementById(\"input\")! as HTMLInputElement\r\n\r\n    const divide = document.getElementById(\"divide\")!\r\n    divide.onclick = () => {\r\n        tree.divide()\r\n    }\r\n\r\n    const cut = document.getElementById(\"cut\")!\r\n    cut.onclick = () => {\r\n        tree.cut()\r\n    }\r\n\r\n    const copy = document.getElementById(\"copy\")!\r\n    copy.onclick = () => {\r\n        input.value = JSON.stringify(tree.tree)\r\n    }\r\n\r\n    document.getElementById(\"undo\")!.onclick = () => {\r\n        tree.undo()\r\n    }\r\n\r\n    // document.getElementById(\"screen-shot\")!.onclick = async () => {\r\n    //     const url = await captureScreen()\r\n\r\n    //     console.log(url)\r\n    // }\r\n\r\n    window.addEventListener(\"keydown\", (e) => {\r\n        if (e.ctrlKey && e.code === \"KeyZ\") {\r\n            tree.undo()\r\n        }\r\n\r\n        if (e.ctrlKey && e.code === \"KeyY\") {\r\n            tree.redo()\r\n        }\r\n\r\n        if (e.ctrlKey && e.code === \"KeyC\") {\r\n            navigator.clipboard.writeText(JSON.stringify(tree.tree))\r\n        }\r\n    })\r\n\r\n    document.getElementById(\"redo\")!.onclick = () => {\r\n        tree.redo()\r\n    }\r\n    ;(window as any).tree = tree\r\n\r\n    form.onsubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const representation = input.value\r\n            .replaceAll(\"\\n\", \"\")\r\n            .replaceAll(\"0\", \"[]\")\r\n            .replaceAll(\"(\", \"[\")\r\n            .replaceAll(\")\", \"]\")\r\n\r\n        tree.tree = JSON.parse(representation)\r\n        tree.display()\r\n    }\r\n\r\n    const tree2 = new Tree(container, info)\r\n\r\n    const stream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n    })\r\n\r\n    const track = stream.getVideoTracks()[0]\r\n\r\n    // 型定義にない場合は any にキャスト\r\n    const imageCapture = new (window as any).ImageCapture(track)\r\n\r\n    await new Promise((resolve) => setTimeout(resolve, 2000))\r\n\r\n    // トリミングするピクセル数\r\n    const trimLeft = 0\r\n    const trimBottom = 800\r\n\r\n    for (const t of generateRankNTree(5)) {\r\n        tree.tree = t\r\n\r\n        if (tree.isSemiFractal()) {\r\n            tree2.tree = tree.getCut(t)\r\n            tree2.top = 40\r\n\r\n            container.innerHTML = \"\"\r\n\r\n            tree.display()\r\n            tree2.display()\r\n\r\n            await new Promise((resolve) => requestAnimationFrame(resolve))\r\n            await new Promise((resolve) => requestAnimationFrame(resolve))\r\n\r\n            // grabFrame も any 扱いにする\r\n            const bitmap: ImageBitmap = await imageCapture.grabFrame()\r\n\r\n            // 切り抜きサイズを計算\r\n            const cropWidth = bitmap.width - trimLeft\r\n            const cropHeight = bitmap.height - trimBottom\r\n\r\n            const canvas = document.createElement(\"canvas\")\r\n            canvas.width = cropWidth\r\n            canvas.height = cropHeight\r\n\r\n            const ctx = canvas.getContext(\"2d\")\r\n            if (!ctx) throw new Error(\"Canvas context not available\")\r\n\r\n            // 左と下をトリミング\r\n            ctx.drawImage(\r\n                bitmap,\r\n                trimLeft, // sx: 左から何pxカットするか\r\n                0, // sy: 上は切らない\r\n                cropWidth, // sw: 幅\r\n                cropHeight, // sh: 高さ\r\n                0, // dx\r\n                0, // dy\r\n                cropWidth, // dw\r\n                cropHeight, // dh\r\n            )\r\n\r\n            downloadImage(canvas.toDataURL(\"image/png\"), JSON.stringify(t))\r\n        }\r\n    }\r\n\r\n    track.stop() // キャプチャ終了\r\n})\r\n\r\ntype tree = [] | [tree] | [tree, tree]\r\n\r\n// const tree = new Tree(document.body, document.body)\r\n\r\n// const semiFractals: Record<string, string> = {}\r\n// const fractals = []\r\n\r\n// for (const t of generateRankNTree(5)) {\r\n//     tree.tree = t\r\n\r\n//     if (tree.isSemiFractal()) semiFractals[JSON.stringify(t)] = JSON.stringify(tree.getCut(t))\r\n//     if (tree.isFractal()) fractals.push(JSON.stringify(t))\r\n// }\r\n\r\n// console.log(JSON.stringify(semiFractals, null, 4))\r\n// console.log(JSON.stringify(fractals))\r\n\r\nfunction* generateRankNTree(n: number): Generator<tree> {\r\n    if (n === 0) {\r\n        yield []\r\n        return\r\n    }\r\n\r\n    for (const subTree of generateRankNTree(n - 1)) {\r\n        yield [subTree]\r\n    }\r\n\r\n    for (const subTree of generateRankNTree(n - 1)) {\r\n        for (const subTree2 of generateRankNTree(n - 1)) {\r\n            yield [subTree, subTree2]\r\n        }\r\n    }\r\n}\r\n\r\nfunction downloadImage(url: string, filename: string) {\r\n    const a = document.createElement(\"a\")\r\n    a.href = url\r\n    a.download = filename\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n}\r\n"],"names":["Connector","#defaultOption","#layer","#createLayer","svg","marker","#createMarker","defs","path","#A","#B","#resizeObserverA","#resizeObserverB","#requestAnimationId","a","b","options","svgLayer","#createHitLine","#createLine","#setupObserver","line","hitLine","update","#getPoint","el","anchor","r","p1","p2","Tree","#gap","#container","#edges","#vertices","#contextMenu","#info","#selectedLeafIdMap","#selectedCount","#historyIndex","container","info","#divide","tree","save","c","#countRank","root","w","#displayGraph","v","e","#add","#remove","#take","id","parentElement","vertex","color","edge","vertex0","edge0","width0","vertex1","color1","edge1","width1","av","#stringify","branch","t","i","trees","#getRankNTrees","first","rank","leftRank","rightRank","n","#folder","parent","depth","button","layer","created","create","p","form","input","divide","cut","copy","representation","tree2","track","imageCapture","resolve","trimLeft","trimBottom","generateRankNTree","bitmap","cropWidth","cropHeight","canvas","ctx","downloadImage","subTree","subTree2","url","filename"],"mappings":"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"}